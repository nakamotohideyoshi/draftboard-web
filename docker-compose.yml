version: '2'
services:
  # when linked container is up, this will also be running
  # you can see this by running `docker-compose ps` to view active containers
  # run `docker-compose exec postgres sh` to mess around in this container
  postgres:
    image: kiasaki/alpine-postgres:9.4
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "5432:5432"
    volumes:
      - draftboard_postgres:/var/lib/postgresql/data


  # when linked container is up, this will also be running
  # you can see this by running `docker-compose ps` to view active containers
  # run `docker-compose exec redis sh` to mess around in this container
  redis-server:
    image: sickp/alpine-redis:3.2.6
    restart: unless-stopped
    expose:
      - "6379"
    ports:
      - "6379:6379"


  #  Celery Flower - To monitor local Celery workers.
  #  To use: run 'docker-compose up flower', then visit localhost:5555
  flower:
    build:
      context: .
      args:
        - DRAFTBOARD_SETTINGS
    command: celery flower -A mysite --broker=redis://redis-server:6379/1 --port=5555
    links:
      - redis-server
    volumes:
      - .:/code
    ports:
      - "5555:5555"


  # run `docker-compose up celery` to start the process
  # then `docker-compose scale celery=[x]` to add x number of processes!
  celery:
    build:
      context: .
      args:
        - DRAFTBOARD_SETTINGS
    command: dumb-init celery worker -A mysite -l info --purge -Q long_running,realtime,celery,time_machine
    links:
      - postgres
      - redis-server
    volumes:
      - .:/code
    environment:
      # allows celery to run as the root user.
      - C_FORCE_ROOT=true


  # run `docker-compose up celery_beat` to start the process
  celery_beat:
    build:
      context: .
      args:
        - DRAFTBOARD_SETTINGS
    command: dumb-init celery beat -A mysite -l debug
    links:
      - postgres
      - redis-server
    volumes:
      - .:/code
    environment:
      # allows celery to run as the root user.
      - C_FORCE_ROOT=true


  # Run `docker-compose up django` to start up runserver process
  # Run `docker-compose run django sh -l` to access shell where you can run commands
  django:
    build:
      context: .
      args:
        - DRAFTBOARD_SETTINGS
    command: dumb-init python3 manage.py runserver 0.0.0.0:8000
    links:
      - postgres
      - redis-server
    ports:
      - "8000:8000"
    volumes:
      - .:/code


# declare the named volumes so that they persist
# need to create this before running services
# run `docker volume create --name draftboard_postgres`
volumes:
  draftboard_postgres:
    external: true
