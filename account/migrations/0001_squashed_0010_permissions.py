# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-11-09 10:26
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
from django.contrib.auth.hashers import make_password
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# account.migrations.0004_auth_users
# account.migrations.0005_emailnotification_displayed_text
# account.migrations.0009_auto_20161028_0029
# account.migrations.0010_permissions
def load_initial_data_0004(apps, schema_editor):
    """
    Loads the initial Auth Users(s). This function will be passed to 'migrations.RunPython' which supplies the arguments.

    :param apps:
    :param schema_editor:
    :return:
    """


    #
    # get the model by name
    User = apps.get_model('auth', 'User')
    password = User.objects.make_random_password()


    draftboard = User()
    draftboard.username= settings.USERNAME_DRAFTBOARD
    draftboard.password = make_password(password)
    draftboard.is_superuser = False
    draftboard.is_staff = True
    draftboard.save()

    escrow = User()
    escrow.username = settings.USERNAME_ESCROW
    escrow.password= make_password(password)
    escrow.is_superuser = False
    escrow.is_staff = True
    escrow.save()

def load_initial_data_0005(apps, schema_editor):
    """
    adds

    :param apps:
    :param schema_editor:
    :return:
    """

    data = [
        {
            'category'      : 'contest',
            'name'          : 'starting',
            'description'   : 'contest have started',
            'displayed_text': 'Contests are starting',
            'default_value' : True,
            'deprecated'    : False
        },
        {
            'category'      : 'contest',
            'name'          : 'prizes-paid',
            'description'   : 'user has won money from contests',
            'displayed_text': 'Contest victories',
            'default_value' : True,
            'deprecated'    : False
        },
        {
            'category'      : 'campaign',
            'name'          : 'newsletter',
            'description'   : 'whether to send the newsletter',
            'displayed_text': 'Newsletter',
            'default_value' : True,
            'deprecated'    : False
        },
        {
            'category'      : 'contest',
            'name'          : 'starting-soon',
            'description'   : 'user has contests which are starting soon',
            'displayed_text': 'Upcoming contests',
            'default_value' : True,
            'deprecated'    : False
        },
    ]

    # get the model by name
    EmailNotification = apps.get_model('account', 'EmailNotification')

    for obj in data:

        try:
            n = EmailNotification.objects.get( category=obj['category'],
                                               name=obj['name'])
        except EmailNotification.DoesNotExist:
            n = EmailNotification()

            #
            # set the data['fields'] to the email notification
            n.category          = obj['category']
            n.name              = obj['name']
            n.description       = obj['description']
            n.displayed_text    = obj['displayed_text']
            n.default_value     = obj['default_value']
            n.deprecated        = obj['deprecated']
            n.save()


def create_information_model_for_all_users(apps, schema_editor):
    """
    We repurposed the Information model and it NEEDS to exist on a user now.
    This will make sure all users have an Information model attached to them.
    New users will get one upon registration.
    """

    User = apps.get_model('auth', 'User')
    Information = apps.get_model("account", "Information")

    for user in User.objects.all():
        print('Getting or creating Information model for user: %s' % user.username)
        Information.objects.get_or_create(user=user)


def forward(apps, schema_editor):
    Group = apps.get_model('auth', 'group')
    Permission = apps.get_model('auth', 'permission')
    User = apps.get_model('auth', 'user')
    ContentType = apps.get_model('contenttypes', 'contenttype')
    group = Group(name="feature-access_subdomains")
    group.save()
    c_type = ContentType.objects.get_for_model(User)
    permission = Permission(
        codename="access_subdomains",
        content_type=c_type,
        name='Can access all subdomain sites'
    )
    permission.save()
    group.permissions.add(permission)


def backward(apps, schema_editor):
    Group = apps.get_model('auth', 'group')
    Group.objects.filter(name="feature-access_subdomains").delete()


class Migration(migrations.Migration):

    replaces = [('account', '0001_initial'), ('account', '0002_auto_20150418_0110'), ('account', '0003_auto_20150428_0038'), ('account', '0004_auth_users'), ('account', '0005_emailnotification_displayed_text'), ('account', '0006_auto_20160127_1756'), ('account', '0002_auto_20160627_1825'), ('account', '0003_userlog'), ('account', '0004_auto_20161013_1836'), ('account', '0007_auto_20161026_0117'), ('account', '0008_auto_20161028_0028'), ('account', '0009_auto_20161028_0029'), ('account', '0010_permissions')]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('contest', 'Contest'), ('campaign', 'Campaign')], default='', max_length=100)),
                ('name', models.CharField(default='', max_length=100)),
                ('description', models.CharField(default='', max_length=255)),
                ('default_value', models.BooleanField(default=True)),
                ('deprecated', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('fullname', models.CharField(default='', max_length=100)),
                ('address1', models.CharField(default='', max_length=255)),
                ('address2', models.CharField(blank=True, default='', max_length=255)),
                ('city', models.CharField(default='', max_length=64)),
                ('state', models.CharField(choices=[('NH', 'NH'), ('CA', 'CA'), ('FL', 'FL')], default='', max_length=2)),
                ('zipcode', models.CharField(default='', max_length=5)),
                ('dob', models.DateField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserEmailNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
                ('email_notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.EmailNotification')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='emailnotification',
            unique_together=set([('category', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='useremailnotification',
            unique_together=set([('user', 'email_notification')]),
        ),
        migrations.RunPython(
            code=load_initial_data_0004,
        ),
        migrations.AddField(
            model_name='emailnotification',
            name='displayed_text',
            field=models.CharField(default='', help_text='this text is shown to users', max_length=512),
        ),
        migrations.RunPython(
            code=load_initial_data_0005,
        ),
        migrations.AlterModelOptions(
            name='emailnotification',
            options={'verbose_name': 'Email Notification'},
        ),
        migrations.AlterModelOptions(
            name='information',
            options={'verbose_name': 'Information'},
        ),
        migrations.AlterField(
            model_name='information',
            name='zipcode',
            field=models.CharField(default='', max_length=6),
        ),
        migrations.CreateModel(
            name='SavedCardDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('token', models.CharField(max_length=256)),
                ('type', models.CharField(choices=[('amex', 'AmericanExpress'), ('discover', 'Discover'), ('mastercard', 'MasterCard'), ('visa', 'Visa')], max_length=32)),
                ('last_4', models.CharField(max_length=4)),
                ('exp_month', models.IntegerField(default=0)),
                ('exp_year', models.IntegerField(default=0)),
                ('default', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='savedcarddetails',
            unique_together=set([('user', 'token')]),
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.SmallIntegerField(choices=[(0, 'Location verification'), (1, 'Contest actions'), (2, 'User funds actions'), (3, 'User authenntication')])),
                ('ip', models.CharField(blank=True, max_length=15, null=True)),
                ('action', models.SmallIntegerField(choices=[(0, 'Country check failed'), (1, 'State check failed'), (2, 'VPN check failed'), (3, 'IP check status'), (4, 'IP check bypassed, user on local network'), (5, 'User Login'), (6, 'Lineup creation'), (7, 'Lineup edited'), (8, 'Contest entered'), (9, 'Contest deregistered'), (10, 'Deposit funds'), (11, 'Deposit pageview'), (12, 'Withdraw request - paypal'), (13, 'Trulioo verification failed'), (14, 'Trulioo verification success'), (15, 'User identity is already claimed'), (16, 'IP not found in the db')])),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'User Logs',
                'ordering': ['-timestamp'],
                'verbose_name': 'User Log',
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('birth_day', models.PositiveSmallIntegerField()),
                ('birth_month', models.PositiveSmallIntegerField()),
                ('birth_year', models.PositiveSmallIntegerField()),
                ('postal_code', models.CharField(max_length=16)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Trulioo User Identity',
            },
        ),
        migrations.AlterModelOptions(
            name='information',
            options={'permissions': (('can_bypass_location_check', 'Can bypass location check'), ('can_bypass_age_check', 'Can bypass age check'), ('can_bypass_identity_verification', 'Can bypass identity verification')), 'verbose_name': 'Information', 'verbose_name_plural': 'information'},
        ),
        migrations.RemoveField(
            model_name='information',
            name='address1',
        ),
        migrations.RemoveField(
            model_name='information',
            name='address2',
        ),
        migrations.RemoveField(
            model_name='information',
            name='city',
        ),
        migrations.RemoveField(
            model_name='information',
            name='dob',
        ),
        migrations.RemoveField(
            model_name='information',
            name='fullname',
        ),
        migrations.RemoveField(
            model_name='information',
            name='state',
        ),
        migrations.RemoveField(
            model_name='information',
            name='zipcode',
        ),
        migrations.RunPython(
            code=create_information_model_for_all_users,
        ),
        migrations.RunPython(
            code=forward,
            reverse_code=backward,
        ),
    ]
